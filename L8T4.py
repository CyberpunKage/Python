'''
Начните работу над проектом «Склад оргтехники». Создайте класс, описывающий склад.
А также класс «Оргтехника», который будет базовым для классов-наследников.
Эти классы — конкретные типы оргтехники (принтер, сканер, ксерокс).
В базовом классе определить параметры, общие для приведенных типов.
В классах-наследниках реализовать параметры, уникальные для каждого типа оргтехники.

Разработать методы, отвечающие за приём оргтехники на склад и передачу в определенное подразделение компании.
Для хранения данных о наименовании и количестве единиц оргтехники, а также других данных, можно использовать любую подходящую структуру, например словарь.

Реализуйте механизм валидации вводимых пользователем данных.
Например, для указания количества принтеров, отправленных на склад, нельзя использовать строковый тип данных.
Подсказка: постарайтесь по возможности реализовать в проекте «Склад оргтехники» максимум возможностей, изученных на уроках по ООП.
'''
class store_tech:
    def __init__(self,name, cost, quantity, dynamic_arg, *args):
        self.name = name #передаю название
        self.cost = cost #передаю стоимость
        self.quantity = quantity #передаю количество
        self.scroll = {'Название товара': self.name, 'Стоимость': self.cost, 'Количество': self.quantity}
        self.storage = [] #хранение товара (словари в списке)
        self.end = [] # Конечное состояние данных
        self.d_arg = dynamic_arg # Аргумент для работы дочерних классов

    def my_valid_error(self):
        try:
            tap = input(f'\033[38mВведите имя товара: ')
            tap_c = int(input(f'Введите стоимость товара: '))
            tap_q = int(input(f'Введите количество товара: '))
            data = {'Название товара': tap, 'Стоимость': tap_c, 'Количество': tap_q}
            self.scroll.update(data) # Ввод в словарь данных
            self.storage.append(self.scroll) #Добавление на хранение товара
            print(f'На складе: \n {self.storage}')
        except:
            print('\033[31m Ошибка ввода')
        a = input('\033[38m Введите q для выхода или любую другую клавишу для продолжения: ')
        if a == 'q':
            self.end.append(self.storage)
            print(f'Состояние склада: \n {self.end}')
        else:
            return store_tech.my_valid_error(self)

class printer(store_tech):
    def one(self):
        print(f'Метод печати, печать экземпляра в количестве: {self.d_arg} раз')

class scanner(store_tech):
    def two(self):
        print(f'Метод сканирования, сканирование экземпляра в количестве: {self.d_arg} раз')

class xerox(store_tech):
    def three(self):
        print(f'Метод ксерокопирования, печать экземпляра в количестве: {self.d_arg} раз')

a = printer('gogi', 17000, 2, 70)
b = scanner('mirror', 14000, 1, 15)
c = xerox('miracle', 13000, 2, 44)
print(a.my_valid_error())
print(b.my_valid_error())
print(c.my_valid_error())
print(b.one())
